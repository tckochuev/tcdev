  main.cpp
  Unknown compiler version - please run the configure tests and report the results
C:\Boost\boost/iterator.hpp(16,12): warning C4996: 'std::iterator': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
C:\Boost\boost/regex/v4/match_results.hpp(60,4): warning C4996: 'std::allocator<boost::sub_match<const char *>>::const_reference': warning STL4010: Various members of std::allocator are deprecated in C++17. Use std::allocator_traits instead of accessing these members directly. You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
C:\Boost\boost/regex/v4/instances.hpp(95): message : see reference to class template instantiation 'boost::match_results<const char *,std::allocator<boost::sub_match<const char *>>>' being compiled
C:\Boost\boost/regex/v4/match_results.hpp(60,4): warning C4996: 'std::allocator<boost::sub_match<std::_String_const_iterator<std::_String_val<std::_Simple_types<_Elem>>>>>::const_reference': warning STL4010: Various members of std::allocator are deprecated in C++17. Use std::allocator_traits instead of accessing these members directly. You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              _Elem=char
          ]
C:\Boost\boost/regex/v4/instances.hpp(103): message : see reference to class template instantiation 'boost::match_results<std::_String_const_iterator<std::_String_val<std::_Simple_types<_Elem>>>,std::allocator<boost::sub_match<std::_String_const_iterator<std::_String_val<std::_Simple_types<_Elem>>>>>>' being compiled
          with
          [
              _Elem=char
          ]
C:\Boost\boost/regex/v4/match_results.hpp(60,4): warning C4996: 'std::allocator<boost::sub_match<const wchar_t *>>::const_reference': warning STL4010: Various members of std::allocator are deprecated in C++17. Use std::allocator_traits instead of accessing these members directly. You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
C:\Boost\boost/regex/v4/instances.hpp(95): message : see reference to class template instantiation 'boost::match_results<const wchar_t *,std::allocator<boost::sub_match<const wchar_t *>>>' being compiled
C:\Boost\boost/regex/v4/match_results.hpp(60,4): warning C4996: 'std::allocator<boost::sub_match<std::_String_const_iterator<std::_String_val<std::_Simple_types<_Elem>>>>>::const_reference': warning STL4010: Various members of std::allocator are deprecated in C++17. Use std::allocator_traits instead of accessing these members directly. You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              _Elem=wchar_t
          ]
C:\Boost\boost/regex/v4/instances.hpp(103): message : see reference to class template instantiation 'boost::match_results<std::_String_const_iterator<std::_String_val<std::_Simple_types<_Elem>>>,std::allocator<boost::sub_match<std::_String_const_iterator<std::_String_val<std::_Simple_types<_Elem>>>>>>' being compiled
          with
          [
              _Elem=wchar_t
          ]
C:\Boost\boost/regex/v4/match_results.hpp(60,4): warning C4996: 'std::allocator<boost::sub_match<BidiIterator>>::const_reference': warning STL4010: Various members of std::allocator are deprecated in C++17. Use std::allocator_traits instead of accessing these members directly. You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              BidiIterator=const unsigned short *
          ]
C:\Boost\boost/regex/v4/instances.hpp(95): message : see reference to class template instantiation 'boost::match_results<const unsigned short *,std::allocator<boost::sub_match<BidiIterator>>>' being compiled
          with
          [
              BidiIterator=const unsigned short *
          ]
C:\Boost\boost/regex/v4/match_results.hpp(60,4): warning C4996: 'std::allocator<boost::sub_match<BidiIterator>>::const_reference': warning STL4010: Various members of std::allocator are deprecated in C++17. Use std::allocator_traits instead of accessing these members directly. You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              BidiIterator=std::_String_const_iterator<std::_String_val<std::_Simple_types<unsigned short>>>
          ]
C:\Boost\boost/regex/v4/instances.hpp(103): message : see reference to class template instantiation 'boost::match_results<std::_String_const_iterator<std::_String_val<std::_Simple_types<_Elem>>>,std::allocator<boost::sub_match<BidiIterator>>>' being compiled
          with
          [
              _Elem=unsigned short,
              BidiIterator=std::_String_const_iterator<std::_String_val<std::_Simple_types<unsigned short>>>
          ]
C:\Boost\boost/operators.hpp(834,10): warning C4996: 'std::iterator<std::input_iterator_tag,V,D,P,R>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility(5959,54): message : see declaration of 'std::iterator'
C:\Boost\boost/operators.hpp(835): message : see reference to class template instantiation 'boost::operators_impl::input_iterator_helper<T,V,D,P,R>' being compiled
C:\Boost\boost/operators.hpp(840,10): warning C4996: 'std::iterator<std::output_iterator_tag,void,void,void,void>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility(5959,54): message : see declaration of 'std::iterator'
C:\Boost\boost/operators.hpp(845): message : see reference to class template instantiation 'boost::operators_impl::output_iterator_helper<T>' being compiled
C:\Boost\boost/operators.hpp(854,10): warning C4996: 'std::iterator<std::forward_iterator_tag,V,D,P,R>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility(5959,54): message : see declaration of 'std::iterator'
C:\Boost\boost/operators.hpp(855): message : see reference to class template instantiation 'boost::operators_impl::forward_iterator_helper<T,V,D,P,R>' being compiled
C:\Boost\boost/operators.hpp(864,10): warning C4996: 'std::iterator<std::bidirectional_iterator_tag,V,D,P,R>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility(5959,54): message : see declaration of 'std::iterator'
C:\Boost\boost/operators.hpp(865): message : see reference to class template instantiation 'boost::operators_impl::bidirectional_iterator_helper<T,V,D,P,R>' being compiled
C:\Boost\boost/operators.hpp(874,10): warning C4996: 'std::iterator<std::random_access_iterator_tag,V,D,P,R>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility(5959,54): message : see declaration of 'std::iterator'
C:\Boost\boost/operators.hpp(880): message : see reference to class template instantiation 'boost::operators_impl::random_access_iterator_helper<T,V,D,P,R>' being compiled
  cppboost.vcxproj -> C:\Users\kochuev\Documents\cppboost\build\src\Debug\cppboost.exe
